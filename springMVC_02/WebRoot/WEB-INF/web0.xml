<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">
	<display-name>springMVC_02</display-name>
	<filter>
		<filter-name>encoding</filter-name>
		<filter-class> org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encoding</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<servlet>
		<servlet-name>springMVC</servlet-name>
		<!-- 其实DispatcherServlet就是一个拦截器 -->
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/springMVC.xml</param-value>
		</init-param>
	</servlet>
	<!-- url映射1 在开发中规定该url请求下的controller方法返回jsp视图-->
	<servlet-mapping>
		<servlet-name>springMVC</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
	<!-- url映射2 在开发中规定该url请求下的controller方法支持多视图 -->
	<servlet-mapping>
		<servlet-name>springMVC</servlet-name>
		<url-pattern>/rest/*</url-pattern>
	</servlet-mapping>
	<!-- 被拦截的所有*.do和/rest/*，都可以映射到/mulitview所映射的控制方法。
		 比如以/mulitview.do和/rest/mulitview请求,但是Adapter根据请求url
		 找不到其返回的视图解析器！当以/mulitview.json或者是/multiview.xml
		 请求的时候，猜想：会有一个处理后缀的拦截器也罢，过滤器也罢拦截到.json和
		 .xml的请求，然后去掉后缀后匹配到/multiview，根据所映射的方法以及后缀
		 确定Adapter所要调用的viewResolver！如果无法确定则报错！
		 确定方式见MultiviewController.java。
		 显然.do也被添加到拦截后缀组中,但没有为其匹配viewResolver！
	 -->
	<welcome-file-list>
		<welcome-file>/index.jsp</welcome-file>
	</welcome-file-list>
</web-app>