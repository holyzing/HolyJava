<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper    
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"    
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.holy.mapper.UserMapper">
<!-- 
	    	使用resultType进行结果映射时，需要查询出的列名和映射的对象的属性名一致，才能映射成功。
			如果查询的列名和对象的属性名全部不一致，那么映射的对象为空。   selective
			如果查询的列名和对象的属性名有一个一致，那么映射的对象不为空，但是只有映射正确那一个属性才有值。
			如果查询的sql的列名有别名，那么这个别名就是和属性映射的列名。 
			注意，对简单类型的结果映射也是有要求的，查询的列必须是一列，才能映射为简单类型。
			综合查询时，需要根据综合查询的添加查询用户的总数
			
			pojo单个映射和，多个相同pojo映射，均以pojo类型作为返回类型即可
			同样的mapper映射文件，返回单个对象和对象列表时，mapper接口在生成动态代理的时候，
			会根据返回值的类型，决定调用selectOne方法还是selectList方法。
-->
	<!-- 根据用户ID查询用户信息 -->
	<select id="findUserById" parameterType="int" resultType="User">
		SELECT * FROM USER WHERE id =#{id}
	</select>

	<!-- 添加用户 -->
	<insert id="insertUser" parameterType="com.holy.entity.User">
		<selectKey keyProperty="id" resultType="int" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO USER (username,birthday,sex,address)
		VALUES(#{username},#{birthday},#{sex},#{address})
	</insert>
	
	<!-- 综合查询，查询用户列表 -->
	<select id="findUserList1" parameterType="com.holy.entity.UserQueryVO" resultType="user">
		SELECT * FROM user where username like '%${user.username}%' and  sex=#{user.sex}
	</select>
		<!-- 定义sql片段 
			在mybatis中，它提供了一些动态sql标签，可以让程序员更快的进行mybatis的开发，
			这些动态sql可以通过sql的可重用性。
			常用的动态sql标签：if标签、where标签、sql片段、foreach标签
			
			综合查询时，查询条件由用户来输入，用户名称可以为空，需要满足这种情况下的sql编写。
		-->
	<select id="findUserList2" parameterType="hashmap" resultType="user">
		SELECT * FROM user 
		<where>
			<!-- where标签：默认去掉后面第一个AND，如果没有参数，则把自己干掉 -->
			<!-- if标签：可以对输入的参数进行判断 -->
			<!-- test:指定判断表达式 -->
			<if test="user != null">
				<if test="user.username != null and user.username != ''">
					AND username LIKE '%${user.username}%'
				</if>
				<if test="user.sex != null and user.sex != ''">
					AND sex = #{user.sex}
				</if>
			</if>
		</where>
	</select>
	<select id="findUserList3" parameterType="com.holy.entity.UserQueryVO" resultType="user">
		SELECT * FROM user
		<where>
			<!-- 引入sql片段 -->
			<include refid="whereClause" />
		</where>
	</select>
	<!-- 综合查询用户总数 -->
    <select id="findUserCount" parameterType="com.holy.entity.UserQueryVO" resultType="int" >
		SELECT count(*) FROM user
		<where>
			<include refid="whereClause" />
		</where>
	</select>	
	
	
	<!-- Sql片段可以让代码有更高的可重用性 Sql片段需要先定义后使用
		 sql片段内，可以定义sql语句中任何部分 
		 sql片段内，最好不用将where和select关键字声明在内,因为这会降低sql片段的重用性
		 建议：
			1、SQL片段中的内容最好是以单表来定义
			2、如果是查询字段，则不要写上SELECT
			3、如果是条件语句，则不要写上WHERE
	-->
	<sql id="whereClause">
		<if test="user != null">
			<if test="user.username != null and user.username != ''">
				AND username LIKE '%${user.username}%'
			</if>
			<if test="user.sex != null and user.sex != ''">
				AND sex = #{user.sex}
			</if>
		</if>

		<if test="idList != null">
			<!--foreach标签可以循环传入参数值，进行循环执行 
			综合查询时，会根据用户ID集合进行查询 SELECT * FROM USER WHERE id IN (1,2,10)
			AND id IN (#{id},#{id},#{id}) open="AND id IN ("
			 -->
			<!-- [foreach标签]：表示一个foreach循环 -->
			<!-- [collection]：集合参数的名称，如果是直接传入集合参数，则该处的参数名称只能填写[list]。 -->
			<!-- [item]：每次遍历出来的对象 -->
			<!-- [open]：开始遍历时拼接的串 -->
			<!-- [close]：结束遍历时拼接的串 -->
			<!-- [separator]：遍历出的每个对象之间需要拼接的字符 -->
			AND id IN    
			<foreach collection="idList" item="id" open="(" close=")" separator=",">
				#{id}
			</foreach>
		</if>
	</sql>
	<!-- [如果是直接传入集合参数，则该处的参数名称只能填写[list]] -->
	<select id="findUsersByIdList" parameterType="java.util.List" resultType="user">
		SELECT * FROM USER
		<where>
			<if test="list != null and list.size > 0">
				<foreach collection="list" item="id" open="AND id IN (" close=")" separator=",">
					#{id}
				</foreach>
			</if>
		</where>
	</select>

	<!-- resultMap入门 
			使用resultMap进行结果映射时，不需要查询的列名和映射的属性名必须一致。
			如果查询出来的列名和属性名不一致，通过定义一个resultMap将列名和pojo属性名之间作一个映射关系。
			Select id id_,username username_,sex sex_ from user where id = 1;
			result主要是用来做查询结果集的高级映射的，且只有resultMap才能映射延迟加载
			
			resultType底层也是由resultMap实现的，resultType映射是列名与属性名必须一致
	-->
	<!-- 
		[id]：定义resultMap的唯一标识
		[type]：定义该resultMap最终映射的pojo对象
		[id标签]：映射结果集的唯一标识列，如果是多个字段联合唯一，则定义多个id标签
		[result标签]：映射结果集的普通列
		[column]：SQL查询的列名，如果列有别名，则该处填写别名
		[property]：pojo对象的属性名
	-->
	<resultMap type="user" id="UserRstMap">
		<id column="id_" property="id" />
		<result column="username_" property="username" />
		<result column="sex_" property="sex" />
	</resultMap>

	<select id="findUserRstMap" parameterType="int" resultMap="UserRstMap">
		Select id id_,username username_,sex sex_ from user where id = #{id}
	</select>
</mapper>

